{"version":3,"file":"static/js/88.55b7c047.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/AccordionContext.js","../node_modules/react-bootstrap/esm/AccordionCollapse.js","../node_modules/react-bootstrap/esm/AccordionItemContext.js","../node_modules/react-bootstrap/esm/AccordionBody.js","../node_modules/react-bootstrap/esm/AccordionButton.js","../node_modules/react-bootstrap/esm/AccordionHeader.js","../node_modules/react-bootstrap/esm/AccordionItem.js","../node_modules/react-bootstrap/esm/Accordion.js","../node_modules/dom-helpers/esm/scrollbarSize.js","../node_modules/@restart/hooks/esm/useWillUnmount.js","../node_modules/@restart/hooks/esm/useUpdatedRef.js","../node_modules/react-bootstrap/esm/ModalBody.js","../node_modules/react-bootstrap/esm/ModalDialog.js","../node_modules/react-bootstrap/esm/ModalFooter.js","../node_modules/react-bootstrap/esm/ModalHeader.js","../node_modules/react-bootstrap/esm/ModalTitle.js","../node_modules/react-bootstrap/esm/Modal.js","../node_modules/@restart/hooks/esm/useCallbackRef.js","../node_modules/extend/index.js","../node_modules/style-to-object/src/index.ts","../node_modules/inline-style-parser/index.js","../node_modules/estree-util-is-identifier-name/lib/index.js","../node_modules/hast-util-whitespace/lib/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/unist-util-position/lib/index.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/hast-util-to-jsx-runtime/lib/index.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/html-url-attributes/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-subtokenize/lib/splice-buffer.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/@ungap/structured-clone/esm/types.js","../node_modules/@ungap/structured-clone/esm/deserialize.js","../node_modules/@ungap/structured-clone/esm/serialize.js","../node_modules/@ungap/structured-clone/esm/index.js","../node_modules/micromark-util-sanitize-uri/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/trim-lines/index.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/state.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/remark-rehype/lib/index.js","../node_modules/bail/index.js","../node_modules/unified/node_modules/is-plain-obj/index.js","../node_modules/trough/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/unified/lib/callable-instance.js","../node_modules/unified/lib/index.js","../node_modules/react-markdown/lib/index.js","../node_modules/style-to-js/src/index.ts","../node_modules/style-to-js/src/utilities.ts"],"sourcesContent":["\"use client\";\n\nimport * as React from 'react';\nexport function isAccordionItemSelected(activeEventKey, eventKey) {\n  return Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : activeEventKey === eventKey;\n}\nconst context = /*#__PURE__*/React.createContext({});\ncontext.displayName = 'AccordionContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Collapse from './Collapse';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * This component accepts all of [`Collapse`'s props](/docs/utilities/transitions#collapse-1).\n */\nconst AccordionCollapse = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  children,\n  eventKey,\n  ...props\n}, ref) => {\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-collapse');\n  return /*#__PURE__*/_jsx(Collapse, {\n    ref: ref,\n    in: isAccordionItemSelected(activeEventKey, eventKey),\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(Component, {\n      children: React.Children.only(children)\n    })\n  });\n});\nAccordionCollapse.displayName = 'AccordionCollapse';\nexport default AccordionCollapse;","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext({\n  eventKey: ''\n});\ncontext.displayName = 'AccordionItemContext';\nexport default context;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionBody = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  onEnter,\n  onEntering,\n  onEntered,\n  onExit,\n  onExiting,\n  onExited,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-body');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  return /*#__PURE__*/_jsx(AccordionCollapse, {\n    eventKey: eventKey,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionBody.displayName = 'AccordionBody';\nexport default AccordionBody;","\"use client\";\n\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport classNames from 'classnames';\nimport AccordionContext, { isAccordionItemSelected } from './AccordionContext';\nimport AccordionItemContext from './AccordionItemContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useAccordionButton(eventKey, onClick) {\n  const {\n    activeEventKey,\n    onSelect,\n    alwaysOpen\n  } = useContext(AccordionContext);\n  return e => {\n    /*\n      Compare the event key in context with the given event key.\n      If they are the same, then collapse the component.\n    */\n    let eventKeyPassed = eventKey === activeEventKey ? null : eventKey;\n    if (alwaysOpen) {\n      if (Array.isArray(activeEventKey)) {\n        if (activeEventKey.includes(eventKey)) {\n          eventKeyPassed = activeEventKey.filter(k => k !== eventKey);\n        } else {\n          eventKeyPassed = [...activeEventKey, eventKey];\n        }\n      } else {\n        // activeEventKey is undefined.\n        eventKeyPassed = [eventKey];\n      }\n    }\n    onSelect == null || onSelect(eventKeyPassed, e);\n    onClick == null || onClick(e);\n  };\n}\nconst AccordionButton = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'button',\n  bsPrefix,\n  className,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-button');\n  const {\n    eventKey\n  } = useContext(AccordionItemContext);\n  const accordionOnClick = useAccordionButton(eventKey, onClick);\n  const {\n    activeEventKey\n  } = useContext(AccordionContext);\n  if (Component === 'button') {\n    props.type = 'button';\n  }\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    onClick: accordionOnClick,\n    ...props,\n    \"aria-expanded\": Array.isArray(activeEventKey) ? activeEventKey.includes(eventKey) : eventKey === activeEventKey,\n    className: classNames(className, bsPrefix, !isAccordionItemSelected(activeEventKey, eventKey) && 'collapsed')\n  });\n});\nAccordionButton.displayName = 'AccordionButton';\nexport default AccordionButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionButton from './AccordionButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionHeader = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'h2',\n  'aria-controls': ariaControls,\n  bsPrefix,\n  className,\n  children,\n  onClick,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-header');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    children: /*#__PURE__*/_jsx(AccordionButton, {\n      onClick: onClick,\n      \"aria-controls\": ariaControls,\n      children: children\n    })\n  });\n});\nAccordionHeader.displayName = 'AccordionHeader';\nexport default AccordionHeader;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionItemContext from './AccordionItemContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst AccordionItem = /*#__PURE__*/React.forwardRef(({\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  bsPrefix,\n  className,\n  eventKey,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'accordion-item');\n  const contextValue = useMemo(() => ({\n    eventKey\n  }), [eventKey]);\n  return /*#__PURE__*/_jsx(AccordionItemContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix)\n    })\n  });\n});\nAccordionItem.displayName = 'AccordionItem';\nexport default AccordionItem;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AccordionBody from './AccordionBody';\nimport AccordionButton from './AccordionButton';\nimport AccordionCollapse from './AccordionCollapse';\nimport AccordionContext from './AccordionContext';\nimport AccordionHeader from './AccordionHeader';\nimport AccordionItem from './AccordionItem';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Accordion = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'div',\n    activeKey,\n    bsPrefix,\n    className,\n    onSelect,\n    flush,\n    alwaysOpen,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'accordion');\n  const contextValue = useMemo(() => ({\n    activeEventKey: activeKey,\n    onSelect,\n    alwaysOpen\n  }), [activeKey, onSelect, alwaysOpen]);\n  return /*#__PURE__*/_jsx(AccordionContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...controlledProps,\n      className: classNames(className, prefix, flush && `${prefix}-flush`)\n    })\n  });\n});\nAccordion.displayName = 'Accordion';\nexport default Object.assign(Accordion, {\n  Button: AccordionButton,\n  Collapse: AccordionCollapse,\n  Item: AccordionItem,\n  Header: AccordionHeader,\n  Body: AccordionBody\n});","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","import useUpdatedRef from './useUpdatedRef';\nimport { useEffect } from 'react';\n\n/**\n * Attach a callback that fires when a component unmounts\n *\n * @param fn Handler to run when the component unmounts\n * @category effects\n */\nexport default function useWillUnmount(fn) {\n  const onUnmount = useUpdatedRef(fn);\n  useEffect(() => () => onUnmount.current(), []);\n}","import { useRef } from 'react';\n\n/**\n * Returns a ref that is immediately updated with the new value\n *\n * @param value The Ref value\n * @category refs\n */\nexport default function useUpdatedRef(value) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  return valueRef;\n}","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalBody = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-body');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nModalBody.displayName = 'ModalBody';\nexport default ModalBody;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalDialog = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  contentClassName,\n  centered,\n  size,\n  fullscreen,\n  children,\n  scrollable,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const dialogClass = `${bsPrefix}-dialog`;\n  const fullScreenClass = typeof fullscreen === 'string' ? `${bsPrefix}-fullscreen-${fullscreen}` : `${bsPrefix}-fullscreen`;\n  return /*#__PURE__*/_jsx(\"div\", {\n    ...props,\n    ref: ref,\n    className: classNames(dialogClass, className, size && `${bsPrefix}-${size}`, centered && `${dialogClass}-centered`, scrollable && `${dialogClass}-scrollable`, fullscreen && fullScreenClass),\n    children: /*#__PURE__*/_jsx(\"div\", {\n      className: classNames(`${bsPrefix}-content`, contentClassName),\n      children: children\n    })\n  });\n});\nModalDialog.displayName = 'ModalDialog';\nexport default ModalDialog;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalFooter = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-footer');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nModalFooter.displayName = 'ModalFooter';\nexport default ModalFooter;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractModalHeader from './AbstractModalHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ModalHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  closeLabel = 'Close',\n  closeButton = false,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-header');\n  return /*#__PURE__*/_jsx(AbstractModalHeader, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsPrefix),\n    closeLabel: closeLabel,\n    closeButton: closeButton\n  });\n});\nModalHeader.displayName = 'ModalHeader';\nexport default ModalHeader;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport divWithClassName from './divWithClassName';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nconst ModalTitle = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = DivStyledAsH4,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal-title');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nModalTitle.displayName = 'ModalTitle';\nexport default ModalTitle;","\"use client\";\n\nimport classNames from 'classnames';\nimport addEventListener from 'dom-helpers/addEventListener';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport removeEventListener from 'dom-helpers/removeEventListener';\nimport getScrollbarSize from 'dom-helpers/scrollbarSize';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport useWillUnmount from '@restart/hooks/useWillUnmount';\nimport transitionEnd from 'dom-helpers/transitionEnd';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport BaseModal from '@restart/ui/Modal';\nimport { getSharedManager } from './BootstrapModalManager';\nimport Fade from './Fade';\nimport ModalBody from './ModalBody';\nimport ModalContext from './ModalContext';\nimport ModalDialog from './ModalDialog';\nimport ModalFooter from './ModalFooter';\nimport ModalHeader from './ModalHeader';\nimport ModalTitle from './ModalTitle';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/* eslint-disable no-use-before-define, react/no-multi-comp */\nfunction DialogTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, {\n    ...props,\n    timeout: null\n  });\n}\nfunction BackdropTransition(props) {\n  return /*#__PURE__*/_jsx(Fade, {\n    ...props,\n    timeout: null\n  });\n}\n\n/* eslint-enable no-use-before-define */\nconst Modal = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  style,\n  dialogClassName,\n  contentClassName,\n  children,\n  dialogAs: Dialog = ModalDialog,\n  'data-bs-theme': dataBsTheme,\n  'aria-labelledby': ariaLabelledby,\n  'aria-describedby': ariaDescribedby,\n  'aria-label': ariaLabel,\n  /* BaseModal props */\n\n  show = false,\n  animation = true,\n  backdrop = true,\n  keyboard = true,\n  onEscapeKeyDown,\n  onShow,\n  onHide,\n  container,\n  autoFocus = true,\n  enforceFocus = true,\n  restoreFocus = true,\n  restoreFocusOptions,\n  onEntered,\n  onExit,\n  onExiting,\n  onEnter,\n  onEntering,\n  onExited,\n  backdropClassName,\n  manager: propsManager,\n  ...props\n}, ref) => {\n  const [modalStyle, setStyle] = useState({});\n  const [animateStaticModal, setAnimateStaticModal] = useState(false);\n  const waitingForMouseUpRef = useRef(false);\n  const ignoreBackdropClickRef = useRef(false);\n  const removeStaticModalAnimationRef = useRef(null);\n  const [modal, setModalRef] = useCallbackRef();\n  const mergedRef = useMergedRefs(ref, setModalRef);\n  const handleHide = useEventCallback(onHide);\n  const isRTL = useIsRTL();\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'modal');\n  const modalContext = useMemo(() => ({\n    onHide: handleHide\n  }), [handleHide]);\n  function getModalManager() {\n    if (propsManager) return propsManager;\n    return getSharedManager({\n      isRTL\n    });\n  }\n  function updateDialogStyle(node) {\n    if (!canUseDOM) return;\n    const containerIsOverflowing = getModalManager().getScrollbarWidth() > 0;\n    const modalIsOverflowing = node.scrollHeight > ownerDocument(node).documentElement.clientHeight;\n    setStyle({\n      paddingRight: containerIsOverflowing && !modalIsOverflowing ? getScrollbarSize() : undefined,\n      paddingLeft: !containerIsOverflowing && modalIsOverflowing ? getScrollbarSize() : undefined\n    });\n  }\n  const handleWindowResize = useEventCallback(() => {\n    if (modal) {\n      updateDialogStyle(modal.dialog);\n    }\n  });\n  useWillUnmount(() => {\n    removeEventListener(window, 'resize', handleWindowResize);\n    removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();\n  });\n\n  // We prevent the modal from closing during a drag by detecting where the\n  // click originates from. If it starts in the modal and then ends outside\n  // don't close.\n  const handleDialogMouseDown = () => {\n    waitingForMouseUpRef.current = true;\n  };\n  const handleMouseUp = e => {\n    if (waitingForMouseUpRef.current && modal && e.target === modal.dialog) {\n      ignoreBackdropClickRef.current = true;\n    }\n    waitingForMouseUpRef.current = false;\n  };\n  const handleStaticModalAnimation = () => {\n    setAnimateStaticModal(true);\n    removeStaticModalAnimationRef.current = transitionEnd(modal.dialog, () => {\n      setAnimateStaticModal(false);\n    });\n  };\n  const handleStaticBackdropClick = e => {\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n    handleStaticModalAnimation();\n  };\n  const handleClick = e => {\n    if (backdrop === 'static') {\n      handleStaticBackdropClick(e);\n      return;\n    }\n    if (ignoreBackdropClickRef.current || e.target !== e.currentTarget) {\n      ignoreBackdropClickRef.current = false;\n      return;\n    }\n    onHide == null || onHide();\n  };\n  const handleEscapeKeyDown = e => {\n    if (keyboard) {\n      onEscapeKeyDown == null || onEscapeKeyDown(e);\n    } else {\n      // Call preventDefault to stop modal from closing in @restart/ui.\n      e.preventDefault();\n      if (backdrop === 'static') {\n        // Play static modal animation.\n        handleStaticModalAnimation();\n      }\n    }\n  };\n  const handleEnter = (node, isAppearing) => {\n    if (node) {\n      updateDialogStyle(node);\n    }\n    onEnter == null || onEnter(node, isAppearing);\n  };\n  const handleExit = node => {\n    removeStaticModalAnimationRef.current == null || removeStaticModalAnimationRef.current();\n    onExit == null || onExit(node);\n  };\n  const handleEntering = (node, isAppearing) => {\n    onEntering == null || onEntering(node, isAppearing);\n\n    // FIXME: This should work even when animation is disabled.\n    addEventListener(window, 'resize', handleWindowResize);\n  };\n  const handleExited = node => {\n    if (node) node.style.display = ''; // RHL removes it sometimes\n    onExited == null || onExited(node);\n\n    // FIXME: This should work even when animation is disabled.\n    removeEventListener(window, 'resize', handleWindowResize);\n  };\n  const renderBackdrop = useCallback(backdropProps => /*#__PURE__*/_jsx(\"div\", {\n    ...backdropProps,\n    className: classNames(`${bsPrefix}-backdrop`, backdropClassName, !animation && 'show')\n  }), [animation, backdropClassName, bsPrefix]);\n  const baseModalStyle = {\n    ...style,\n    ...modalStyle\n  };\n\n  // If `display` is not set to block, autoFocus inside the modal fails\n  // https://github.com/react-bootstrap/react-bootstrap/issues/5102\n  baseModalStyle.display = 'block';\n  const renderDialog = dialogProps => /*#__PURE__*/_jsx(\"div\", {\n    role: \"dialog\",\n    ...dialogProps,\n    style: baseModalStyle,\n    className: classNames(className, bsPrefix, animateStaticModal && `${bsPrefix}-static`, !animation && 'show'),\n    onClick: backdrop ? handleClick : undefined,\n    onMouseUp: handleMouseUp,\n    \"data-bs-theme\": dataBsTheme,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby,\n    children: /*#__PURE__*/_jsx(Dialog, {\n      ...props,\n      onMouseDown: handleDialogMouseDown,\n      className: dialogClassName,\n      contentClassName: contentClassName,\n      children: children\n    })\n  });\n  return /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalContext,\n    children: /*#__PURE__*/_jsx(BaseModal, {\n      show: show,\n      ref: mergedRef,\n      backdrop: backdrop,\n      container: container,\n      keyboard: true // Always set true - see handleEscapeKeyDown\n      ,\n      autoFocus: autoFocus,\n      enforceFocus: enforceFocus,\n      restoreFocus: restoreFocus,\n      restoreFocusOptions: restoreFocusOptions,\n      onEscapeKeyDown: handleEscapeKeyDown,\n      onShow: onShow,\n      onHide: onHide,\n      onEnter: handleEnter,\n      onEntering: handleEntering,\n      onEntered: onEntered,\n      onExit: handleExit,\n      onExiting: onExiting,\n      onExited: handleExited,\n      manager: getModalManager(),\n      transition: animation ? DialogTransition : undefined,\n      backdropTransition: animation ? BackdropTransition : undefined,\n      renderBackdrop: renderBackdrop,\n      renderDialog: renderDialog\n    })\n  });\n});\nModal.displayName = 'Modal';\nexport default Object.assign(Modal, {\n  Body: ModalBody,\n  Header: ModalHeader,\n  Title: ModalTitle,\n  Footer: ModalFooter,\n  Dialog: ModalDialog,\n  TRANSITION_DURATION: 300,\n  BACKDROP_TRANSITION_DURATION: 150\n});","import { useState } from 'react';\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nexport default function useCallbackRef() {\n  return useState(null);\n}","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","import type { Declaration } from 'inline-style-parser';\nimport parse from 'inline-style-parser';\n\nexport { Declaration };\n\ninterface StyleObject {\n  [name: string]: string;\n}\n\ntype Iterator = (\n  property: string,\n  value: string,\n  declaration: Declaration,\n) => void;\n\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nexport default function StyleToObject(\n  style: string,\n  iterator?: Iterator,\n): StyleObject | null {\n  let styleObject: StyleObject | null = null;\n\n  if (!style || typeof style !== 'string') {\n    return styleObject;\n  }\n\n  const declarations = parse(style);\n  const hasIterator = typeof iterator === 'function';\n\n  declarations.forEach((declaration) => {\n    if (declaration.type !== 'declaration') {\n      return;\n    }\n\n    const { property, value } = declaration;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      styleObject = styleObject || {};\n      styleObject[property] = value;\n    }\n  });\n\n  return styleObject;\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","import StyleToObject from 'style-to-object';\n\nimport { camelCase, CamelCaseOptions } from './utilities';\n\ntype StyleObject = Record<string, string>;\n\ninterface StyleToJSOptions extends CamelCaseOptions {}\n\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style: string, options?: StyleToJSOptions): StyleObject {\n  const output: StyleObject = {};\n\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  StyleToObject(style, (property, value) => {\n    // skip CSS comment\n    if (property && value) {\n      output[camelCase(property, options)] = value;\n    }\n  });\n\n  return output;\n}\n\nStyleToJS.default = StyleToJS;\n\nexport = StyleToJS;\n","const CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nconst HYPHEN_REGEX = /-([a-z])/g;\nconst NO_HYPHEN_REGEX = /^[^-]+$/;\nconst VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nconst MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n\n/**\n * Checks whether to skip camelCase.\n */\nconst skipCamelCase = (property: string) =>\n  !property ||\n  NO_HYPHEN_REGEX.test(property) ||\n  CUSTOM_PROPERTY_REGEX.test(property);\n\n/**\n * Replacer that capitalizes first character.\n */\nconst capitalize = (match: string, character: string) =>\n  character.toUpperCase();\n\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nconst trimHyphen = (match: string, prefix: string) => `${prefix}-`;\n\n/**\n * CamelCase options.\n */\nexport interface CamelCaseOptions {\n  reactCompat?: boolean;\n}\n\n/**\n * CamelCases a CSS property.\n */\nexport const camelCase = (property: string, options: CamelCaseOptions = {}) => {\n  if (skipCamelCase(property)) {\n    return property;\n  }\n\n  property = property.toLowerCase();\n\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\n"],"names":["isAccordionItemSelected","activeEventKey","eventKey","Array","isArray","includes","context","React","displayName","AccordionCollapse","_ref","ref","as","Component","bsPrefix","className","children","props","useContext","AccordionContext","useBootstrapPrefix","_jsx","Collapse","in","classNames","only","AccordionBody","onEnter","onEntering","onEntered","onExit","onExiting","onExited","AccordionItemContext","AccordionButton","onClick","accordionOnClick","onSelect","alwaysOpen","e","eventKeyPassed","filter","k","useAccordionButton","type","AccordionHeader","ariaControls","AccordionItem","contextValue","useMemo","Provider","value","Accordion","activeKey","flush","controlledProps","useUncontrolled","prefix","Object","assign","Button","Item","Header","Body","size","scrollbarSize","recalc","canUseDOM","scrollDiv","document","createElement","style","position","top","width","height","overflow","body","appendChild","offsetWidth","clientWidth","removeChild","useWillUnmount","fn","onUnmount","valueRef","useRef","current","useUpdatedRef","useEffect","ModalBody","ModalDialog","contentClassName","centered","fullscreen","scrollable","dialogClass","fullScreenClass","ModalFooter","ModalHeader","closeLabel","closeButton","AbstractModalHeader","DivStyledAsH4","divWithClassName","ModalTitle","DialogTransition","Fade","timeout","BackdropTransition","Modal","dialogClassName","dialogAs","Dialog","dataBsTheme","ariaLabelledby","ariaDescribedby","ariaLabel","show","animation","backdrop","keyboard","onEscapeKeyDown","onShow","onHide","container","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","backdropClassName","manager","propsManager","modalStyle","setStyle","useState","animateStaticModal","setAnimateStaticModal","waitingForMouseUpRef","ignoreBackdropClickRef","removeStaticModalAnimationRef","modal","setModalRef","mergedRef","useMergedRefs","handleHide","useEventCallback","isRTL","useIsRTL","modalContext","getModalManager","getSharedManager","updateDialogStyle","node","containerIsOverflowing","getScrollbarWidth","modalIsOverflowing","scrollHeight","ownerDocument","documentElement","clientHeight","paddingRight","getScrollbarSize","undefined","paddingLeft","handleWindowResize","dialog","removeEventListener","window","handleDialogMouseDown","handleMouseUp","target","handleStaticModalAnimation","transitionEnd","handleClick","currentTarget","handleStaticBackdropClick","renderBackdrop","useCallback","backdropProps","baseModalStyle","display","ModalContext","BaseModal","preventDefault","handleEnter","isAppearing","handleEntering","addEventListener","transition","backdropTransition","renderDialog","dialogProps","role","onMouseUp","onMouseDown","Title","Footer","TRANSITION_DURATION","BACKDROP_TRANSITION_DURATION","hasOwn","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","options","name","enumerable","configurable","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","iterator","styleObject","declarations","inline_style_parser_1","default","hasIterator","forEach","declaration","property","__importDefault","require","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","prop","val","ret","decl","decls","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","definition","normalize","toLowerCase","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","types","DefinedInfo","mask","index","super","mark","check","values","create","properties","normals","entries","info","transform","attributes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","async","autoCapitalize","autoComplete","autoPlay","blocking","capture","charSet","checked","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","htmlBase","svgBase","cap","dash","valid","kebab","$0","camelcase","toUpperCase","hastToReact","pointEnd","point","pointStart","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","isStaticChildren","columnNumber","fileName","lineNumber","developmentCreate","jsxs","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","element","estree","expression","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","commas","styleToJs","reactCompat","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","isIdentifierName","computed","Boolean","optional","toDash","urlAttributes","icon","includeImageAlt","includeHtml","all","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","extension","hook","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","ok","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","nok","disable","null","blankLine","partial","after","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","onBlank","notBlank","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","characterEscape","lineEnding","called","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","resolveText","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","parse","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","deserializer","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","serializer","strict","pair","valueOf","toJSON","toISOString","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","_len","_key","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","handlers","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","defaultHandlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","_len2","output","_key2","middleware","wrapped","_len3","_key3","fnExpectsCallback","done","then","_len4","_key4","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","joined","segments","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","style_to_object_1","utilities_1","StyleToJS","camelCase","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","trimHyphen","skipCamelCase"],"sourceRoot":""}